version: '3.8'

services:
  # Infrastructure
  postgres:
    image: postgres:16-alpine
    container_name: travel-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - travel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: travel-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@travel.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - travel-network
    depends_on:
      - postgres

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: travel-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - travel-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: travel-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - travel-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: travel-jaeger
    ports:
      - "6831:6831/udp"
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - travel-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: travel-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - travel-network

  grafana:
    image: grafana/grafana:latest
    container_name: travel-grafana
    ports:
      - "3100:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json
    networks:
      - travel-network
    depends_on:
      - prometheus

  alertmanager:
    image: prom/alertmanager:latest
    container_name: travel-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - travel-network

  # Services
  identityservice-api:
    build:
      context: .
      dockerfile: src/Services/IdentityService/IdentityService.API/Dockerfile
    container_name: identityservice-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=identity_db;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - Jwt__SecretKey=your-super-secret-key-at-least-32-characters-long-change-in-production
      - Jwt__Issuer=TravelPortal
      - Jwt__Audience=TravelPortal
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
      - Jaeger__Host=jaeger
    ports:
      - "5001:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - travel-network
    restart: on-failure

  tenantservice-api:
    build:
      context: .
      dockerfile: src/Services/TenantService/TenantService.API/Dockerfile
    container_name: tenantservice-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=tenant_db;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
    ports:
      - "5002:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - travel-network
    restart: on-failure

  catalogservice-api:
    build:
      context: .
      dockerfile: src/Services/CatalogService/CatalogService.API/Dockerfile
    container_name: catalogservice-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=catalog_db;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - Jwt__SecretKey=your-super-secret-key-at-least-32-characters-long-change-in-production
      - Jwt__Issuer=TravelPortal
      - Jwt__Audience=TravelPortal
    ports:
      - "5003:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - travel-network
    restart: on-failure

  bookingservice-api:
    build:
      context: .
      dockerfile: src/Services/BookingService/BookingService.API/Dockerfile
    container_name: bookingservice-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=booking_db;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - Jwt__SecretKey=your-super-secret-key-at-least-32-characters-long-change-in-production
      - Jwt__Issuer=TravelPortal
      - Jwt__Audience=TravelPortal
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
    ports:
      - "5004:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - travel-network
    restart: on-failure

  paymentservice-api:
    build:
      context: .
      dockerfile: src/Services/PaymentService/PaymentService.API/Dockerfile
    container_name: paymentservice-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=payment_db;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - Jwt__SecretKey=your-super-secret-key-at-least-32-characters-long-change-in-production
      - Jwt__Issuer=TravelPortal
      - Jwt__Audience=TravelPortal
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
    ports:
      - "5005:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - travel-network
    restart: on-failure

  notificationservice-api:
    build:
      context: .
      dockerfile: src/Services/NotificationService/NotificationService.API/Dockerfile
    container_name: notificationservice-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=notification_db;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - Jwt__SecretKey=your-super-secret-key-at-least-32-characters-long-change-in-production
      - Jwt__Issuer=TravelPortal
      - Jwt__Audience=TravelPortal
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
    ports:
      - "5006:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - travel-network
    restart: on-failure

  reportingservice-api:
    build:
      context: .
      dockerfile: src/Services/ReportingService/ReportingService.API/Dockerfile
    container_name: reportingservice-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=reporting_db;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - Jwt__SecretKey=your-super-secret-key-at-least-32-characters-long-change-in-production
      - Jwt__Issuer=TravelPortal
      - Jwt__Audience=TravelPortal
    ports:
      - "5007:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - travel-network
    restart: on-failure

  apigateway:
    build:
      context: .
      dockerfile: src/Services/Gateway/ApiGateway/Dockerfile
    container_name: apigateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "8080:8080"
    depends_on:
      - identityservice-api
      - tenantservice-api
      - catalogservice-api
      - bookingservice-api
      - paymentservice-api
      - notificationservice-api
      - reportingservice-api
    networks:
      - travel-network

volumes:
  postgres_data:
  pgadmin_data:
  rabbitmq_data:
  redis_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  travel-network:
    driver: bridge

