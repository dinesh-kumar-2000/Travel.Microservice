name: Build and Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOTNET_VERSION: "8.0.x"
  POSTGRES_VERSION: "15"
  REDIS_VERSION: "7"
  RABBITMQ_VERSION: "3.12"

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: travel_portal_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3.12-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run unit tests
        run: dotnet test tests/UnitTests/UnitTests.csproj --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults

      - name: Run integration tests
        run: dotnet test tests/IntegrationTests/IntegrationTests.csproj --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=travel_portal_test;Username=postgres;Password=postgres;"
          ConnectionStrings__Redis: "localhost:6379"
          RabbitMQ__Host: "localhost"
          RabbitMQ__Username: "guest"
          RabbitMQ__Password: "guest"

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: TestResults/

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: TestResults/**/*.xml
          reporter: java-junit

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install security tools
        run: |
          dotnet tool install --global security-scan
          dotnet tool install --global dotnet-outdated

      - name: Run security scan
        run: |
          security-scan --severity-threshold high
          dotnet list package --vulnerable --include-transitive

      - name: Check for outdated packages
        run: dotnet-outdated --fail-on-updates

  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          # Build Identity Service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/travel-portal-identity-service:${{ github.sha }} -f src/Services/IdentityService/IdentityService.API/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/travel-portal-identity-service:${{ github.sha }}

          # Build Tenant Service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/travel-portal-tenant-service:${{ github.sha }} -f src/Services/TenantService/TenantService.API/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/travel-portal-tenant-service:${{ github.sha }}

          # Build Catalog Service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/travel-portal-catalog-service:${{ github.sha }} -f src/Services/CatalogService/CatalogService.API/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/travel-portal-catalog-service:${{ github.sha }}

          # Build Booking Service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/travel-portal-booking-service:${{ github.sha }} -f src/Services/BookingService/BookingService.API/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/travel-portal-booking-service:${{ github.sha }}

          # Build Payment Service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/travel-portal-payment-service:${{ github.sha }} -f src/Services/PaymentService/PaymentService.API/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/travel-portal-payment-service:${{ github.sha }}

          # Build Notification Service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/travel-portal-notification-service:${{ github.sha }} -f src/Services/NotificationService/NotificationService.API/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/travel-portal-notification-service:${{ github.sha }}

          # Build Reporting Service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/travel-portal-reporting-service:${{ github.sha }} -f src/Services/ReportingService/ReportingService.API/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/travel-portal-reporting-service:${{ github.sha }}

          # Build API Gateway
          docker build -t ${{ secrets.DOCKER_USERNAME }}/travel-portal-gateway:${{ github.sha }} -f src/Services/Gateway/ApiGateway/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/travel-portal-gateway:${{ github.sha }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f k8s/infrastructure/
          kubectl apply -f k8s/services/
          kubectl set image deployment/identity-service identity-service=${{ secrets.DOCKER_USERNAME }}/travel-portal-identity-service:${{ github.sha }}
          kubectl set image deployment/tenant-service tenant-service=${{ secrets.DOCKER_USERNAME }}/travel-portal-tenant-service:${{ github.sha }}
          kubectl set image deployment/catalog-service catalog-service=${{ secrets.DOCKER_USERNAME }}/travel-portal-catalog-service:${{ github.sha }}
          kubectl set image deployment/booking-service booking-service=${{ secrets.DOCKER_USERNAME }}/travel-portal-booking-service:${{ github.sha }}
          kubectl set image deployment/payment-service payment-service=${{ secrets.DOCKER_USERNAME }}/travel-portal-payment-service:${{ github.sha }}
          kubectl set image deployment/notification-service notification-service=${{ secrets.DOCKER_USERNAME }}/travel-portal-notification-service:${{ github.sha }}
          kubectl set image deployment/reporting-service reporting-service=${{ secrets.DOCKER_USERNAME }}/travel-portal-reporting-service:${{ github.sha }}
          kubectl set image deployment/api-gateway api-gateway=${{ secrets.DOCKER_USERNAME }}/travel-portal-gateway:${{ github.sha }}

      - name: Wait for deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl rollout status deployment/identity-service --timeout=300s
          kubectl rollout status deployment/tenant-service --timeout=300s
          kubectl rollout status deployment/catalog-service --timeout=300s
          kubectl rollout status deployment/booking-service --timeout=300s
          kubectl rollout status deployment/payment-service --timeout=300s
          kubectl rollout status deployment/notification-service --timeout=300s
          kubectl rollout status deployment/reporting-service --timeout=300s
          kubectl rollout status deployment/api-gateway --timeout=300s
